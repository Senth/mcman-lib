// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/jar/jar.go

// Package jar is a generated GoMock package.
package jar

import (
	context "context"
	reflect "reflect"

	coremdl "github.com/Senth/mcman-lib/lib/coremdl"
	gomock "github.com/golang/mock/gomock"
)

// MockJar is a mock of Jar interface.
type MockJar struct {
	ctrl     *gomock.Controller
	recorder *MockJarMockRecorder
}

// MockJarMockRecorder is the mock recorder for MockJar.
type MockJarMockRecorder struct {
	mock *MockJar
}

// NewMockJar creates a new mock instance.
func NewMockJar(ctrl *gomock.Controller) *MockJar {
	mock := &MockJar{ctrl: ctrl}
	mock.recorder = &MockJarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJar) EXPECT() *MockJarMockRecorder {
	return m.recorder
}

// GetMod mocks base method.
func (m *MockJar) GetMod(ctx context.Context, data []byte) (*coremdl.JarInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMod", ctx, data)
	ret0, _ := ret[0].(*coremdl.JarInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMod indicates an expected call of GetMod.
func (mr *MockJarMockRecorder) GetMod(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMod", reflect.TypeOf((*MockJar)(nil).GetMod), ctx, data)
}

// Mockparser is a mock of parser interface.
type Mockparser struct {
	ctrl     *gomock.Controller
	recorder *MockparserMockRecorder
}

// MockparserMockRecorder is the mock recorder for Mockparser.
type MockparserMockRecorder struct {
	mock *Mockparser
}

// NewMockparser creates a new mock instance.
func NewMockparser(ctrl *gomock.Controller) *Mockparser {
	mock := &Mockparser{ctrl: ctrl}
	mock.recorder = &MockparserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockparser) EXPECT() *MockparserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *Mockparser) Parse(data []byte) (*coremdl.JarInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", data)
	ret0, _ := ret[0].(*coremdl.JarInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockparserMockRecorder) Parse(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*Mockparser)(nil).Parse), data)
}
